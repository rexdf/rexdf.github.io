<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Windows | Rexdf]]></title>
  <link href="https://i.rexdf.org/blog/categories/windows/atom.xml" rel="self"/>
  <link href="https://i.rexdf.org/"/>
  <updated>2024-12-16T23:11:13+08:00</updated>
  <id>https://i.rexdf.org/</id>
  <author>
    <name><![CDATA[Rexdf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编译filezilla之2]]></title>
    <link href="https://i.rexdf.org/blog/2015/04/29/bian-yi-filezillazhi-2/"/>
    <updated>2015-04-29T01:41:56+08:00</updated>
    <id>https://i.rexdf.org/blog/2015/04/29/bian-yi-filezillazhi-2</id>
    <content type="html"><![CDATA[<ul class="markdown-toc">
  <li><a href="#shobjh-present-but-cannot-be-compiled">1.shobj.h present but cannot be compiled</a></li>
  <li><a href="#cc1plusexe-has-stopped-working">2.cc1plus.exe has stopped working</a></li>
  <li><a href="#localtimer-gmtimer">3.localtime_r gmtime_r相关的错误</a></li>
  <li><a href="#cygwin-posixprocessh">4.cygwin posix环境影响process.h</a></li>
</ul>

<p>在<a href="/blog/2014/09/20/zi-ji-bian-yi-filezilla-client/" target="_blank">自己编译FileZilla Client</a>中编译过3.9，但是对于最近的3.10却一直编译不出来。</p>

<p>换了多个编译器，其中<a href="/blog/2015/04/04/fa-xian-ge-xin-huan-jing-msys2/" target="_blank">发现个新环境msys2</a>中提到过的基本都试了一遍(实际上主要在实验有4.9的，因为Filezilla3.10.x似乎用到了4.9的一些特性或者头文件)。</p>

<!--more-->

<h3 id="shobjh-present-but-cannot-be-compiled">1.shobj.h present but cannot be compiled</h3>

<p>这个问题也比较复杂，除了msys2，几乎不可避免都存在这个错误，因为是configure时的错误，所以下面的一些错误就不会出现。</p>

<p><code>bash bugs http://blog.rexdf.org MyBlog
checking for whether we need -stdlib=libc++... no
checking for whether we can include &lt;unordered_map&gt;... yes
checking shlobj.h usability... no
checking shlobj.h presence... yes
configure: WARNING: shlobj.h: present but cannot be compiled
configure: WARNING: shlobj.h:     check for missing prerequisite headers?
configure: WARNING: shlobj.h: see the Autoconf documentation
configure: WARNING: shlobj.h:     section "Present But Cannot Be Compiled"
configure: WARNING: shlobj.h: proceeding with the compiler's result
configure: WARNING:     ## ---------------------------------------------- ##
configure: WARNING:     ## Report this to tim.kosse@filezilla-project.org ##
configure: WARNING:     ## ---------------------------------------------- ##
checking for shlobj.h... no
configure: error: shlobj.h not found which is part of the Windows API
</code></p>

<p>解决办法：
&gt; D:\msys\mingw64\x86_64-w64-mingw32\include\shlobj.h
&gt; D:\msys\mingw\i686-w64-mingw32\include\shlobj.h
&gt; 开头几行参考<a href="http://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-headers/include/shlobj.h">MinGW-w64的git源码</a>
&gt; 把9-11行改成如下内容</p>

<p><code>c fix http://blog.rexdf.org MyBlog
#include &lt;wtypesbase.h&gt;
#include &lt;wincrypt.h&gt;
#include &lt;winapifamily.h&gt;
</code></p>

<h3 id="cc1plusexe-has-stopped-working">2.cc1plus.exe has stopped working</h3>

<p>```bash bugs http://blog.rexdf.org MyBlog
make[4]: Entering directory <code>/home/rexdf/filezilla/src/interface'
g++ -DHAVE_CONFIG_H -I. -I../../src/include  -I./../include -I/usr/local/lib/wx/
include/msw-unicode-static-3.0 -I/usr/local/include/wx-3.0 -D_FILE_OFFSET_BITS=6
4 -D__WXMSW__  -ID:/msys/local/include    -fpch-preprocess  -g -O2 -Wall -g -std
=gnu++11 -MT filezilla-aboutdialog.o -MD -MP -MF .deps/filezilla-aboutdialog.Tpo
 -c -o filezilla-aboutdialog.o </code>test -f ‘aboutdialog.cpp’ || echo ‘./’`aboutdial
og.cpp</p>

<p>Makefile:932: recipe for target <code>filezilla-aboutdialog.o' failed
make[4]: *** [filezilla-aboutdialog.o] Error 1
make[4]: Leaving directory </code>/home/rexdf/filezilla/src/interface’
Makefile:2470: recipe for target <code>all-recursive' failed
make[3]: *** [all-recursive] Error 1
make[3]: Leaving directory </code>/home/rexdf/filezilla/src/interface’
Makefile:654: recipe for target <code>all' failed
make[2]: *** [all] Error 2
make[2]: Leaving directory </code>/home/rexdf/filezilla/src/interface’
Makefile:346: recipe for target <code>all-recursive' failed
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory </code>/home/rexdf/filezilla/src’
Makefile:529: recipe for target <code>all-recursive' failed
make: *** [all-recursive] Error 1
</code>``</p>

<p>解决办法，我在论坛提问，作者botg给出了<a href="https://forum.filezilla-project.org/viewtopic.php?f=3&amp;t=36798">答案</a>.
configure的时候添加 <code>--disable-precomp</code></p>

<p>这个已经添加到了<a href="https://wiki.filezilla-project.org/Compiling_FileZilla_3_under_Windows">wiki页面</a>，所以应该不存在什么问题。</p>

<h3 id="localtimer-gmtimer">3.localtime_r gmtime_r相关的错误</h3>

<p>-gnutls-3.3.13/gl/time.h read_file.c</p>

<p>time.h 461 1 error expected identifier or before token</p>

<p><code>bash  bugs http://blog.rexdf.org MyBlog
In file included from ./time.h:369:0,
                 from timespec.h:22,
                 from gettime.c:22:
./time.h:461:1: error: expected identifier or '(' before '{' token
 _GL_FUNCDECL_SYS (localtime_r, struct tm *, (time_t const *restrict __timer,
 ^
./time.h:483:1: error: expected identifier or '(' before '{' token
 _GL_FUNCDECL_SYS (gmtime_r, struct tm *, (time_t const *restrict __timer,
 ^
make[6]: Makefile:1559: recipe for target `gettime.lo' failed*** [gettime.lo] Er
ror 1
</code></p>

<p>检测办法<code>echo -e "#include&lt;pthread.h&gt;\n localtime_r(1,2);" | gcc -E -</code></p>

<p>看输出结果的最后一行是不是localtime_r(1,2),有几个版本的MinGW(TDM-GCC 4.9.2,Win-builds1.5 gcc 4.8.3)展开成了一些乱七八糟的宏。</p>

<p>问题在于这个pthread.h里面定义的错误。</p>

<p>解决办法:把gl/time.h和src/gl/time.h这两个文件手动打一个patch。368行include <pthread.h>的if改成0.(编译时才生产)</pthread.h></p>

<h3 id="cygwin-posixprocessh">4.cygwin posix环境影响process.h</h3>

<p><code>bash  bugs http://blog.rexdf.org MyBlog
make  all-am
make[3]: Entering directory '/home/rexdf/filezilla/src/engine'
i686-w64-mingw32-g++ -DHAVE_CONFIG_H -I. -I../../src/include  -I./../include -I/path/to/msys2/home/rexdf/build/include -I/path/to/msys2/mingw32/include  -I/home/rexdf/build/lib/wx/include/i686-w64-mingw32-msw-unicode-static-3.0 -I/home/rexdf/build/include/wx-3.0 -D_FILE_OFFSET_BITS=64 -D__WXMSW__ -I/home/rexdf/build/include  -g -O2 -Wall -g -std=gnu++11 -MT libengine_a-backend.o -MD -MP -MF .deps/libengine_a-backend.Tpo -c -o libengine_a-backend.o `test -f 'backend.cpp' || echo './'`backend.cpp
In file included from /path/to/msys2/mingw32/include/c++/4.9.2/memory:74:0,
                 from ./process.h:11,
                 from /path/to/msys2/mingw32/i686-w64-mingw32/include/pthread.h:66,
                 from /path/to/msys2/mingw32/include/c++/4.9.2/i686-w64-mingw32/bits/gthr-default.h:35,
                 from /path/to/msys2/mingw32/include/c++/4.9.2/i686-w64-mingw32/bits/gthr.h:148,
                 from /path/to/msys2/mingw32/include/c++/4.9.2/ext/atomicity.h:35,
                 from /path/to/msys2/mingw32/include/c++/4.9.2/bits/basic_string.h:39,
                 from /path/to/msys2/mingw32/include/c++/4.9.2/string:52,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/stringimpl.h:66,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/unichar.h:15,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/strvararg.h:22,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/string.h:46,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/longlong.h:19,
                 from /path/to/msys2/home/rexdf/build/include/wx-3.0/wx/datetime.h:27,
                 from ../../src/include/libfilezilla.h:29,
                 from ./filezilla.h:1,
                 from backend.cpp:1:
/path/to/msys2/mingw32/include/c++/4.9.2/ext/concurrence.h:124:5: error: '__gthread_mutex_t' does not name a type
     __gthread_mutex_t _M_mutex;
     ^
/path/to/msys2/mingw32/include/c++/4.9.2/ext/concurrence.h:169:5: error: '__gthread_mutex_t' does not name a type
     __gthread_mutex_t* gthread_mutex(void)
     ^
/path/to/msys2/mingw32/include/c++/4.9.2/ext/concurrence.h: In constructor '__gnu_cxx::__mutex::__mutex()':
/path/to/msys2/mingw32/include/c++/4.9.2/ext/concurrence.h:134:30: error: '__gthread_active_p' was not declared in this scope
       if (__gthread_active_p ( ) )
                              ^
</code></p>

<ul>
  <li>在cygwin/msys2环境下面，posix环境影响process.h，在src/include/libfilezilla.h里面添加一行(第28行)<code>#include &lt;process.h&gt;</code></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[发现个新环境msys2]]></title>
    <link href="https://i.rexdf.org/blog/2015/04/04/fa-xian-ge-xin-huan-jing-msys2/"/>
    <updated>2015-04-04T15:02:30+08:00</updated>
    <id>https://i.rexdf.org/blog/2015/04/04/fa-xian-ge-xin-huan-jing-msys2</id>
    <content type="html"><![CDATA[<ul class="markdown-toc">
  <li><a href="#mingwmsys-10">MinGW/msys 1.0:</a></li>
  <li><a href="#mingw">MingW</a></li>
  <li><a href="#mingw-w64">MinGW-w64</a></li>
  <li><a href="#mingw-builds">MinGW-builds</a></li>
  <li><a href="#win-builds">Win-builds</a></li>
  <li><a href="#tdm-gcc">tdm-gcc</a></li>
  <li><a href="#cygwin">Cygwin</a></li>
  <li><a href="#msys2">msys2</a></li>
  <li><a href="#section">结束语</a></li>
</ul>

<p>好久没写，发生种种暂且不表。</p>

<p>最近注意到了一个新的Windows上面的模拟Linux的项目。一般来说两大主流阵营MingW与Cygwin，这两个思路各不相同。相对来说MingW性能比较好，尽可能用WinAPI替代实现。Cygwin则是添加了一个层，利用很多dll来模拟Linux的那些syscall(典型的如fork)。所以cygwin程序一般都是需要有cygwin的dll在path里面才可以运行。MingW缺点是很多程序没法编译，如果没有专门为MingW设计的程序，基本上MingW是编译不出来的。Cygwin缺点是会比较慢。</p>

<!-- more -->

<p>另外注意一下环境变量。MingW的环境变量path转换比较简陋很多情况下会有问题。cygwin环境下面有<code>cygpath.exe</code>这个工具来回转化(我就是用它hack了一下在cygwin的Mintty下面能运行调用nodejs处理博客压缩)。另外cygwin的path是Unicode的，偶尔会出现目录过深，windows资源管理器和<code>rd /s </code>都删不掉的超长路径文件，<code>rm -rf</code>可以在Windows下面轻易删除。</p>

<p>msys本来是MingW的基本shell环境，从MingW项目没落之前很久就没更新过了。</p>

<p>msys2是完全不同的项目。下面会详细给出参考。在此之前我们来看看各种Windows下面的gcc native build环境的比较。</p>

<p>在此之前提醒一下，大部分MingW系列都是官网加SourceForge.net托管二进制的模式，所以有两个主要官网.</p>

<h2 id="mingwmsys-10">MinGW/msys 1.0:</h2>

<p>MinGW的官网是<a href="http://www.mingw.org/" target="_blank">http://www.mingw.org/</a>。</p>

<p>MingW里面自带一个msys 1.0，这个比较经典，但是太老了，如果需要gcc 3.4.4与GNU Make 3.81搭配。很多最近的github与svn checkout都会编译失败。基本上除了学习csapp以外没有任何其他用途(它与CSAPP里面例子编译结果一致)。如果要用<code>/bin/gcc</code>就是msys的的古董gcc，因为MinGW的PATH里面<code>/mingw/bin</code>在<code>/bin</code>前面。</p>

<h2 id="mingw">MingW</h2>

<p>还算在更新从<a href="http://sourceforge.net/projects/mingw/" target="_blank">http://sourceforge.net/projects/mingw/</a>上看最后一次更新是2014年12月。估计是某个包的补丁而已。</p>

<h2 id="mingw-w64">MinGW-w64</h2>

<p>官网<a href="http://mingw-w64.yaxm.org" target="_blank">http://mingw-w64.yaxm.org</a>,二进制文件官网<a href="http://sourceforge.net/projects/mingw-w64/" target="_blank">http://sourceforge.net/projects/mingw-w64/</a>。</p>

<p>应该是MinGW的后续了。一个典型的下载目录是<a href="http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.2/threads-win32/seh/" target="_blank">http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.2/threads-win32/seh/</a>，这样的结构。理论上应该更新最好的，是从Linux版本的MinGW编译出的Windows版本。这个是目前正规血统的MinGW项目，虽然是构建Windows的exe和dll文件，但是<strong>它能力最大发挥在Linux平台上</strong>。<strong>支持win7/8/8.1的API</strong>。被<a href="http://ffmpeg.mplayerhq.hu/" target="_blank">ffmpeg</a>，<a href="http://www.gtk.org/download-windows-64bit.html" target="_blank">GTK+</a>，<a href="http://www.openssl.org/" target="_blank">OpenSSL</a>，<a href="http://www.wxwidgets.org/" target="_blank">wxWidgets</a>，<a href="http://www.perl.org/" target="_blank">Perl</a>，<a href="http://sourceware.org/pthreads-win32/" target="_blank">phreads</a>，<a href="http://kde.org/" target="_blank">KDE Software Collection</a>，<a href="http://gimp-win.sourceforge.net/stable.html" target="_blank">GIMP</a>，<a href="http://www.blender.org/" target="_blank">Blender</a>，<a href="http://www.r-project.org/" target="_blank">The R Project for Statistical Computing</a>等项目所使用。但是Windows版本各种bug吧。</p>

<h2 id="mingw-builds">MinGW-builds</h2>

<p>被废弃的官网<a href="https://code.google.com/p/mingw-builds/" target="_blank">https://code.google.com/p/mingw-builds/</a>.</p>

<p>二进制文件官网<a href="http://sourceforge.net/projects/mingwbuilds/" target="_blank">http://sourceforge.net/projects/mingwbuilds/</a>.</p>

<p>似乎是俄罗斯人开发的，目前似乎停止开发了，已有的发行版gcc 4.6.2-4.8.1。一些feature如下(我也不懂直接复制了)。</p>

<pre><code>OpenMP
LTO
Graphite
std Thread support library
std Atomic operations library
Native TLS Callbacks
Wide-Character Startup (-municode)
32-bit and 64-bit Windows
Multilib toolchains
Cross-compiling from x86_64 for i686 and vice versa
</code></pre>

<h2 id="win-builds">Win-builds</h2>

<p>官网是<a href="http://win-builds.org/" target="_blank">http://win-builds.org/</a>.</p>

<p>它需要依附在MinGW或者Cygwin的shell环境下，Linux下也有一个版本。最新是4.8.3版本。</p>

<p>这个比较稳定，其集成了Qt, Curl, EFL, freetype, GTK+, lua, openssl, sqlite, wget, zlib…等等92个库。支持Windows和Linux，感觉如果是做开发，这个好像是个不错的选择。</p>

<p><img src="/images/winbuilds_screenshot.png" alt="Win-builds" class="center fancybox" /></p>

<h2 id="tdm-gcc">tdm-gcc</h2>

<p>官网是<a href="http://tdm-gcc.tdragon.net/" target="_blank">http://tdm-gcc.tdragon.net/</a>.</p>

<p>这个还是比较个性和实用的选择。它默认选用的posix，这个可能会引起一些问题。但是<a href="http://www.wxwidgets.org" target="_blank">wxWidgets</a>官网推荐的编译器就是它，另外一部分人喜欢的Dev-CPP的后续开发版本<a href="http://sourceforge.net/projects/orwelldevcpp/" target="_blank">orwelldevcpp</a>也是用的它。可见其定制还是有一定合理性的。</p>

<p>更新较快最新已经更新到4.9.2了。</p>

<h2 id="cygwin">Cygwin</h2>

<p>这个不用在这里多说，社区很活跃，发邮件很快就有人回复。软件更新也很频繁。这里说下mirror，除了163等。阿里也有mirror，<a href="http://mirrors.aliyun.com/" target="_blank">http://mirrors.aliyun.com/</a>，速度会比较快。但是注意，添加mirror有技巧。首先复制的目录应该是<code>http://mirrors.aliyun.com/cygwin</code>不能带最后的那个<code>/</code>，其次添加之后需要首先随手点击一下其他的，然后再点击刚刚添加的阿里才可以，手动换其他的源也是这样。</p>

<h2 id="msys2">msys2</h2>

<p>官网<a href="http://msys2.github.io" target="_blank">http://msys2.github.io</a> 可能在目前github的一系列事件有关，国内没法直接打开.二进制文件官网<a href="http://sourceforge.net/projects/msys2/" target="_blank">http://sourceforge.net/projects/msys2/</a>.</p>

<p>一个<a href="http://sourceforge.net/p/msys2/wiki/Contributing%20to%20MSYS2/" target="_blank">简介</a>.</p>

<p>两个关键的github repo:</p>

<p><a href="https://github.com/Alexpux/MSYS2-packages" target="_blank">https://github.com/Alexpux/MSYS2-packages</a></p>

<p><a href="https://github.com/Alexpux/MINGW-packages" target="_blank">https://github.com/Alexpux/MINGW-packages</a></p>

<p>如果想自己从源码编译可以用他的patch。实际上SourceForge.net上面的就是用他的patch编译出来的。</p>

<p>另外就是它采用了我最喜欢的ArchLinux的<code>pacman -Syu</code>。简直棒到不行。但是略微有点小问题就是需要rebase，还好它比cygwin自动化一些，直接执行根目录里面的<code>autorebase.bat</code>即可。</p>

<p>我发现他的github里面有很多在所有其他地方没见过的包，比如nodejs(nodejs官网的win版本在cygwin的shell下面会找不到正确的目录，直接拒绝执行，这会导致很多需要用nodejs的命令行项目无法编译以及使用)。</p>

<p>一个国内的二进制mirror:
<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/msys2" target="_blank">MSYS2 镜像使用帮助</a>.</p>

<p><img src="/images/msys2_sc.png" alt="MSYS2" class="center fancybox" /></p>

<h2 id="section">结束语</h2>

<p>最后说一下国人据说很有前途的<a href="https://github.com/wishstudio/flinux" target="_blank">flinux</a>的包管理也是基于pacman的，看来大家都是比较喜欢<code>pacman</code>的了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwin的日常妙用]]></title>
    <link href="https://i.rexdf.org/blog/2015/01/02/cygwinde-ri-chang-miao-yong/"/>
    <updated>2015-01-02T18:09:04+08:00</updated>
    <id>https://i.rexdf.org/blog/2015/01/02/cygwinde-ri-chang-miao-yong</id>
    <content type="html"><![CDATA[<p>电脑的日常使用中总是会感觉一些需求不能满足，比如希望批量重命名1000多个分布在不同文件夹的图片，希望在十多个文件夹中的txt文件中找一个含有某一字符串的文件等。</p>

<!-- more -->

<p>对于这种需求，在Windows上面是开发出了若干的辅助Explorer的，这在喜欢玩小众软件的人中间应该非常流行。比如非常多的一些人都会使用Total Command。但是我一直都是拒绝使用这种软件的。理由有二：其一，学习成本非常高，而且具有较强的排他性，之后看很多其他软件都会带上有色眼镜，重要的是破坏原生Windows的体验；其二，这种基本需求的东西，居然不开源。</p>

<p>我主要的Windows使用习惯是物理机上面基本上不会运行任何有保证的基础软件之外的程序，而且基本上两个月左右必定格盘重做一次系统。另外按照我自己的使用情况来看，大部分需求，Explorer.exe和管理员cmd.exe，都是可以完成需求的。按照我的认为，如果一个日常的文件管理需要写成bat来运行，那么问题就复杂化了，最好的是鼠标点几下或者敲一个一两行的cmd命令就解决。</p>

<p>然而因为我也学习了一段时间的Bash shell，一些基本的文件名查找find和文件内容查找grep，以及强大流编辑器sed和awk，很多问题解决起来也是随手两条命令的事。</p>

<p>在熟悉find和grep之后，基本上就会感觉批处理显得非常无能。但是要注意的它是自带的，而且是标配，也就是说是首选项，如果它也能简单解决自然就不用Bash命令了。</p>

<p>cygwin的bin目录下面很多命令是.exe格式的，另外一些则是不带后缀的shell。对于exe格式的大部分在cmd下面也是可以正常工作的，比如rm，ls，find，grep等，当然最好的工作环境还是在mintty里面。</p>

<p>比如我今天想找我的一个RSA公钥的私钥，然后随手在mintty里面敲了如下一句。</p>

<p><code>bash 命令 http://blog.rexdf.org MyBlog
cd "d:\passwd\sec"
find . -type f -name "*.pub" | xargs grep "iEsSR"
</code></p>

<p>非常快捷的就递归了目录下面的所有pub后缀的文件，然后按内容查找字符。这是非常快捷的。如果批处理则<code>findstr /s iEsSR *.*</code>也可以达到递归查找的目的，只是<strong>不能</strong>限制为pub后缀了。</p>

<p>本文还待完善整理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows权限问题]]></title>
    <link href="https://i.rexdf.org/blog/2014/11/17/windowsquan-xian-wen-ti/"/>
    <updated>2014-11-17T13:37:53+08:00</updated>
    <id>https://i.rexdf.org/blog/2014/11/17/windowsquan-xian-wen-ti</id>
    <content type="html"><![CDATA[<p>Error 0x80070522: A required privilege is not held by the client 权限问题的解决。</p>

<blockquote>
  <p>本来按照 <a href="/blog/2014/07/05/windowsquan-xian-zheng-zha-zhi-cygwinfu-huo-ji/" target="_blank">Windows权限挣扎之cygwin复活记</a> 和 <a href="/blog/2014/09/20/wan-quan-jie-jue-windowsquan-xian-wen-ti/" target="_blank">完全解决Windows权限问题</a> 来takeown和icacls已经可以完全解决权限问题了。但是NTFS ACL远比这要复杂。</p>
</blockquote>

<!-- more -->

<ul class="markdown-toc">
  <li><a href="#cmd">0. 管理员cmd</a></li>
  <li><a href="#owner">1. owner权限获取</a></li>
  <li><a href="#cygwinbinrm">2. 删除操作系统程序(cygwin/bin/rm)</a></li>
  <li><a href="#junctionsysinternalssuitehttptechnetmicrosoftcomen-ussysinternalsbb896768aspx-targetblank">3. 删除JUNCTION链接(<a href="http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx" target="_blank">SysinternalsSuite</a>)</a></li>
  <li><a href="#symlinkd">4. 删除SYMLINKD链接</a></li>
  <li><a href="#x80070522">5. 修复根目录新建、拷贝文件0x80070522</a></li>
</ul>

<p>起因是我要删除移动硬盘上面的一个老系统，本来这种权限问题我以前一直都是格盘这种简单粗暴，但是最高效的方法解决。不过今天就小小研究了一下，如何手工删除非活动中的系统C盘(也就是不是当前的C盘)。</p>

<p>由于我将cygwin的bin放在了path，所以要方便很多。当然<code>rd /s</code>应该也可以达到部分效果。对于隐藏的，或者有系统权限的文件，<code>del</code>和<code>rd</code>都会拒绝或者找不到文件。</p>

<p>下面的过程假设是I盘要处理，同时主要的是一些最细化的技巧，并不在乎达到目的的方法。同时注意利用cmd的tab补全功能，它与bash的补全有所不同，是完整词条补全，并不是最长公共补全，个人认为cmd的补全更加方面。而且cmd的tab补全会自动添加引号，同时Windows下面不需要在乎大小写，tab补全时不用在意大小写。</p>

<h2 id="cmd">0. 管理员cmd</h2>

<pre><code>win+x然后按下a键，左键回车。
</code></pre>

<h2 id="owner">1. owner权限获取</h2>

<pre><code>takeown /f i: /r
</code></pre>

<h2 id="cygwinbinrm">2. 删除操作系统程序(cygwin/bin/rm)</h2>

<pre><code>rm -rf Windows "Program Files (x86)" "Program Files" ProgramData hiberfil.sys pagefile.sys swapfile.sys
</code></pre>

<h2 id="junctionsysinternalssuitehttptechnetmicrosoftcomen-ussysinternalsbb896768aspx-targetblank">3. 删除JUNCTION链接(<a href="http://technet.microsoft.com/en-us/sysinternals/bb896768.aspx" target="_blank">SysinternalsSuite</a>)</h2>

<pre><code>junction -d "Documents and Settings"
</code></pre>

<h2 id="symlinkd">4. 删除SYMLINKD链接</h2>

<pre><code>rd "I:\Users\All Users"
</code></pre>

<h2 id="x80070522">5. 修复根目录新建、拷贝文件0x80070522</h2>

<pre><code>icacls i:\ /setintegritylevel M
</code></pre>

<p>现在基本上这个盘就可以当做格式化后的那种盘使用了。最后这个5，使用的是setintegritylevel命令，其有L[ow] M[edium] H[igh]三种等级。</p>

<p>然后注意的是多<code>dir /a</code>看看，也许还有较多隐藏文件、目录，可以按需删除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完全解决Windows权限问题]]></title>
    <link href="https://i.rexdf.org/blog/2014/09/20/wan-quan-jie-jue-windowsquan-xian-wen-ti/"/>
    <updated>2014-09-20T01:57:30+08:00</updated>
    <id>https://i.rexdf.org/blog/2014/09/20/wan-quan-jie-jue-windowsquan-xian-wen-ti</id>
    <content type="html"><![CDATA[<ul class="markdown-toc">
  <li><a href="#section">起因</a></li>
  <li><a href="#section-1">背景</a></li>
  <li><a href="#section-2">实际问题</a></li>
</ul>

<h1 id="section">起因</h1>
<p>实际上这个问题在我的<a href="/blog/2014/07/05/windowsquan-xian-zheng-zha-zhi-cygwinfu-huo-ji/" target="_blank">Windows权限挣扎之cygwin复活记</a>中已经给出了可以做到理论完美解决的办法。问题是我还没有搞懂Windows权限的一些复杂概念，以及其与Linux权限的映射关系。</p>

<!--more-->

<h1 id="section-1">背景</h1>

<p>Linux权限好像学过的人都知道都理解的。Windows权限对大部分人好像根本不存在，实际上Windows的权限我粗略看了下，好像要比Linux复杂得多。自从默认使用NTFS格式之后，权限就变得非常的复杂了。</p>

<p>其中有一个命令是icacls，利用其备份和还原以及重置，基本上就可以修改成需要的任何权限了。问题是其备份的问题，一般人还是看不懂，也不知道怎么修改的。</p>

<h1 id="section-2">实际问题</h1>

<p>对应到cygwin中就是在重装系统后用takeown取得管理员权限，然后icacls删除所有不认识的ssid似乎就好了。但是我发现今天无意中发现还是有较多的某些文件夹及其中的文件带有一串数字账户。</p>

<p>首先我找到的是<a href="http://gallery.technet.microsoft.com/scriptcenter/Remove-orphaned-SIDs-from-2231b1f0" target="_blank">Remove orphaned SIDs from File/Folder ACL (PowerShell)</a>，不过非常可惜的是，在Win8.1上面，即使<code>-ExecutionPolicy ByPass</code>好像都不能解决问题。简单点说就是无法执行，或者不能递归执行。(如果有谁在WIn8.1上面执行成功欢迎留言告诉我，谢谢！)</p>

<p>这里要说明一个问题，一定要disable inheritance(右键，安全，高级，弹出的那个窗口左下角按钮). 可以使用如下命令进行递归禁用权限继承。</p>

<pre><code>1. ICACLS *.* /inheritance:d /T (禁用继承)
2. ICACLS *.* /remove:g Users /T (这个似乎不工作)
3. ICACLS *.* /inheritance:e /T (启用继承)
</code></pre>

<p>比如我用的就是在cygwin目录下执行<code>icacls *.* /inheritance:d /T</code>，就可以批量保证几十万的文件都禁用了继承。</p>

<p>然后我发现<a href="http://www.microsoft.com/en-us/download/details.aspx?id=23510" target="_blank">SubInACL</a>这个玩意。这个subinacl对于删除ssid好像特别有效。</p>

<p>具体到步骤是这样的：</p>

<ol>
  <li>
    <p>获取所有的权限列表保存到文本文件</p>

    <pre><code> subinacl /subdirectories C\*.* /display &gt;d:\out.txt
</code></pre>
  </li>
  <li>
    <p>排序去重</p>

    <pre><code> cd d:
 sort out.txt /o out2.txt
 uniq out2.txt &gt; out3.txt
</code></pre>

    <p>说明下我的out.txt有2.46G，out2.txt有1.23G，而out3.txt只有33.2M，这样编辑器打开或者grep都容易得多了。</p>

    <p>另外sort是用的Windows内置的命令，uniq是用的cygwin的bin目录下面的，我常年把cygwin/bin放在系统path的system32后面。</p>

    <p>如果没有uniq只是大一点，还是可以找到的。</p>
  </li>
  <li>
    <p>查找<code>pace =S-1</code>开头的。</p>

    <p>由于我重装系统非常频繁，基本一两个月就一次，已经是惯例了，所以在存在继承的情况下，实际上会遗留非常多的ssid账户。这里的ssid用icacls删除不容易，因为如果只删除一个小括号内部的话，icacls执行的时候会拒绝的。但是如果系统已经全面禁止继承了，则应该不会有此风波。</p>
  </li>
  <li>
    <p>对每个ssid执行下面的命令</p>

    <pre><code> subinacl /subdirectories *.* /suppresssid=S-1-5-21-56246481-4602087933-3644394174-1001
</code></pre>

    <p>换S-1-*部分</p>
  </li>
</ol>

<p>至此权限修复完毕。
然后删除etc下面passwd和group，重新打开mintty，然后执行</p>

<pre><code>mkpasswd -l &gt; /etc/passwd
mkgroup -l &gt; /etc/group
</code></pre>

<p>这样再执行<code>ls -al</code>的时候就不会出现<code>???</code>用户组了，全部显示的就是正常的了。</p>
]]></content>
  </entry>
  
</feed>
